import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram import Bot, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database.db import db
from datetime import datetime, timedelta

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()

async def start_notification_scheduler(bot: Bot):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –∑–∞–≤—Ç—Ä–∞, –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 19:00
    scheduler.add_job(
        check_expiring_subscriptions,
        CronTrigger(hour=19, minute=40),  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 19:00
        args=(bot,)
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00
    scheduler.add_job(
        check_expired_subscriptions,
        CronTrigger(hour=19, minute=45),  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00
        args=(bot,)
    )

    scheduler.start()

async def check_expiring_subscriptions(bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –∑–∞–≤—Ç—Ä–∞, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    today = datetime.now().date()  # –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
    tomorrow = today + timedelta(days=1)  # –ó–∞–≤—Ç—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞

    async with db.pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ (–ª—é–±–æ–µ –≤—Ä–µ–º—è)
        subscriptions = await conn.fetch("""
            SELECT s.user_id, s.end_date, c.name
            FROM subscriptions s
            LEFT JOIN configs c ON s.config_id = c.id
            WHERE s.status = 'active'
              AND DATE(s.end_date) = $1
        """, tomorrow)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for sub in subscriptions:
            user_id = sub['user_id']
            config_name = sub['name']
            await send_notification(
                bot,
                user_id,
                f"<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!</b> üîî\n\n"
                f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–ª—é—á <b>{config_name}</b> –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞.\n\n"
                f"–ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞—Ä–∞–Ω–µ–µ:\n"
                f"1. –í –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ <b>'üõí –ö—É–ø–∏—Ç—å'</b>\n"
                f"2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.\n"
                f"3. –û–ø–ª–∞—Ç–∏—Ç–µ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º.\n"
                f"4. –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.\n\n"
                f"–ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∞, —Ç–µ–∫—É—â–∏–π –∫–ª—é—á –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω –∏ —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º. "
                f"–í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∫–ª—é—á.\n\n"
                f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ <b>LumaVPN</b>!"
            )

async def check_expired_subscriptions(bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    async with db.pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–ª–∏
        expired_subscriptions = await conn.fetch("""
            SELECT s.user_id, c.name
            FROM subscriptions s
            LEFT JOIN configs c ON s.config_id = c.id
            WHERE s.end_date < NOW() AND s.status = 'active'
        """)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ 'inactive'
        await conn.execute("""
            UPDATE subscriptions
            SET status = 'inactive'
            WHERE end_date < NOW() AND status = 'active'
        """)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for sub in expired_subscriptions:
            user_id = sub['user_id']
            config_name = sub['name']
            await send_notification(
                bot,
                user_id,
                f"<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–ª—é—á {config_name} –∏—Å—Ç—ë–∫.</b>\n\n"
                "–ö–ª—é—á –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.\n\n"
                "–í–∞—à–∞ <b>LumaVPN</b>!"
            )

    logging.info("–°—Ç–∞—Ç—É—Å—ã –ø–æ–¥–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

async def send_notification(bot: Bot, user_id: int, message_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π '–ü–æ–Ω—è—Ç–Ω–æ'."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–Ω—è—Ç–Ω–æ", callback_data="dismiss_notification")]
    ])

    try:
        await bot.send_message(
            user_id,
            message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–Ω—è—Ç–Ω–æ"
from aiogram import Router

router = Router()

@router.callback_query(lambda c: c.data == "dismiss_notification")
async def handle_dismiss(callback: types.CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É."""
    await callback.message.delete()
    await callback.answer()