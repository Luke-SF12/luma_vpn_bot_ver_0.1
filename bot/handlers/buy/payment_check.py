from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from services.yookassa import check_payment
from database.db import db

router = Router()

@router.callback_query(lambda c: c.data.startswith("check_payment_"))
async def check_payment_handler(callback: types.CallbackQuery):
    payment_id = callback.data.split("_")[2]

    async with db.pool.acquire() as connection:
        payment = await connection.fetchrow(
            "SELECT * FROM payments WHERE payment_id = $1 AND status = 'pending'", payment_id
        )

        if not payment:
            await callback.answer("‚ùå –ù–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.")
            return

        is_paid = await check_payment(payment_id)

        if is_paid:
            await connection.execute("UPDATE payments SET status = 'success' WHERE payment_id = $1", payment_id)
            await callback.message.edit_text(
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üéü –ü–æ–ª—É—á–∏—Ç—å", callback_data="get_config")],
                        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data="extend_subscription")]
                    ]
                )
            )
        else:
            await callback.answer("‚ö† –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
