from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from services.yookassa import create_payment, check_payment
from database.db import db

router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∞—Ä–∏—Ñ–∞
def subscription_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü ‚Äì 129‚ÇΩ", callback_data="buy_1m")],
            [InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ ‚Äì 369‚ÇΩ", callback_data="buy_3m")],
            [InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤ ‚Äì 699‚ÇΩ", callback_data="buy_6m")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
        ]
    )

@router.callback_query(lambda c: c.data == "buy")
async def show_subscriptions(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=subscription_keyboard())
    await callback.answer()

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(lambda c: c.data.startswith("buy_"))
async def buy_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or "unknown"
    plan = callback.data.split("_")[1]

    prices = {"1m": 129, "3m": 369, "6m": 699}
    amount = prices.get(plan, 129)

    async with db.pool.acquire() as connection:
        user = await connection.fetchrow("SELECT * FROM users WHERE tg_id = $1", user_id)
        if not user:
            await connection.execute("INSERT INTO users (tg_id, username) VALUES ($1, $2)", user_id, username)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        payment_id, payment_link = await create_payment(amount, user_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î (–∞ –Ω–µ —Å—Å—ã–ª–∫—É)
        await connection.execute(
            "INSERT INTO payments (user_id, payment_id, amount, status, payment_link) VALUES ($1, $2, $3, $4, $5)",
            user_id, payment_id, amount, "pending", payment_link
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
    payment_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_link)],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{payment_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="buy")]
        ]
    )

    await callback.message.edit_text(
        f"üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ({plan}): {amount}‚ÇΩ\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å.",
        reply_markup=payment_keyboard
    )
    await callback.answer()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
@router.callback_query(lambda c: c.data.startswith("check_payment_"))
async def check_payment_handler(callback: types.CallbackQuery):
    payment_id = callback.data.split("_")[2]

    async with db.pool.acquire() as connection:
        payment = await connection.fetchrow(
            "SELECT * FROM payments WHERE payment_id = $1 AND status = 'pending'", payment_id
        )

        if not payment:
            await callback.answer("‚ùå –ù–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.")
            return

        is_paid = await check_payment(payment_id)

        if is_paid:
            await connection.execute("UPDATE payments SET status = 'success' WHERE payment_id = $1", payment_id)

            action_keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üéü –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏", callback_data="get_config")],
                    [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data="extend_subscription")]
                ]
            )

            await callback.message.edit_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!", reply_markup=action_keyboard)
        else:
            await callback.answer("‚ö† –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")




# –í—ã–¥–∞—á–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
@router.callback_query(lambda c: c.data == "get_config")
async def get_config_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    async with db.pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
        config = await conn.fetchrow("SELECT * FROM configs WHERE is_available = TRUE LIMIT 1")

        if not config:
            await callback.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await conn.execute("UPDATE configs SET is_available = FALSE, user_id = $1 WHERE id = $2", user_id, config["id"])

        # –°–æ–∑–¥–∞—ë–º –ø–æ–¥–ø–∏—Å–∫—É
        await conn.execute("""
            INSERT INTO subscriptions (user_id, plan, start_date, end_date, status, config_id)
            VALUES ($1, '1m', NOW(), NOW() + INTERVAL '1 month', 'active', $2)
        """, user_id, config["id"])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
        file = FSInputFile(config["file_path"], filename=config["file_name"])
        await callback.message.answer_document(file, caption="‚úÖ –í–∞—à –∫–æ–Ω—Ñ–∏–≥ –≥–æ—Ç–æ–≤!")

    await callback.answer()







# –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(lambda c: c.data == "extend_subscription")
async def extend_subscription_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    async with db.pool.acquire() as conn:
        subs = await conn.fetch("""
            SELECT id, plan, end_date, 
                   (SELECT file_name FROM configs WHERE configs.id = subscriptions.config_id) AS file_name
            FROM subscriptions WHERE user_id = $1 AND status = 'active'
        """, user_id)

        if not subs:
            await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            return

        if len(subs) > 1:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=sub["file_name"], callback_data=f"renew_{sub['id']}")]
                    for sub in subs
                ]
            )
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:", reply_markup=keyboard)
            return

        sub = subs[0]
        await renew_subscription(callback, sub["id"])


@router.callback_query(lambda c: c.data.startswith("renew_"))
async def renew_subscription(callback: types.CallbackQuery, subscription_id: int = None):
    """–ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if subscription_id is None:
        subscription_id = int(callback.data.split("_")[1])

    async with db.pool.acquire() as conn:
        sub = await conn.fetchrow("SELECT * FROM subscriptions WHERE id = $1", subscription_id)

        if not sub:
            await callback.message.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        extension_map = {"1m": "1 month", "3m": "3 months", "6m": "6 months"}
        extension = extension_map.get(sub["plan"], "1 month")

        await conn.execute(f"""
            UPDATE subscriptions 
            SET end_date = end_date + INTERVAL '{extension}' 
            WHERE id = $1
        """, subscription_id)

        await callback.message.edit_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!")
        await callback.answer()